version: '3.8'

# Outdoor Tracker Docker Swarm stack configuration
# Use with: docker stack deploy -c swarm-stack.yml outdoortracker

services:
  frontend:
    image: ${MYREG_URL:-}outdoortracker-frontend:${TAG:-latest}
    networks:
      - frontend
    environment:
      - VITE_BACKEND_URL=https://api.outdoortracker.com
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        order: start-first
        failure_action: rollback
        delay: 10s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    healthcheck:
      test: ["CMD", "wget", "--spider", "--quiet", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    image: ${MYREG_URL:-}outdoortracker-backend:${TAG:-latest}
    networks:
      - backend
      - frontend
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@db:5432/${DB_NAME:-outdoortracker}
      - SECRET_KEY=${SECRET_KEY:-default_secret_key_change_in_production}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-default_jwt_secret_key_change_in_production}
      - MAIL_SERVER=${MAIL_SERVER:-smtp.example.com}
      - MAIL_PORT=${MAIL_PORT:-587}
      - MAIL_USE_TLS=${MAIL_USE_TLS:-true}
      - MAIL_USERNAME=${MAIL_USERNAME:-mail_user}
      - MAIL_PASSWORD=${MAIL_PASSWORD:-mail_password}
      - MAIL_DEFAULT_SENDER=${MAIL_DEFAULT_SENDER:-noreply@example.com}
      - FLASK_ENV=${FLASK_ENV:-production}
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
        failure_action: rollback
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    depends_on:
      - db
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  db:
    image: postgres:14-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_DB=${DB_NAME:-outdoortracker}
    networks:
      - backend
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.db == true
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

volumes:
  postgres_data:
    driver: local

networks:
  frontend:
    driver: overlay
    attachable: true
  backend:
    driver: overlay
    attachable: true
