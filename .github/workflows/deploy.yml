name: Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    needs: []  # This could depend on the build-and-test workflow in a production setup
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to Private Registry
      uses: docker/login-action@v2
      if: github.ref == 'refs/heads/main'
      with:
        registry: ${{ secrets.MYREG_URL }}
        username: ${{ secrets.MYREG_USERNAME }}
        password: ${{ secrets.MYREG_TOKEN }}
    
    - name: Build and push backend image
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        push: ${{ github.ref == 'refs/heads/main' }}
        tags: ${{ secrets.MYREG_URL }}/outdoortracker-backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Set build variables
      id: set_build_vars
      run: |
        echo "BUILD_TIME=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
        echo "GIT_SHA=${GITHUB_SHA}" >> $GITHUB_OUTPUT

    - name: Build and push frontend image
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        push: ${{ github.ref == 'refs/heads/main' }}
        tags: ${{ secrets.MYREG_URL }}/outdoortracker-frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VITE_BUILD_TIME=${{ steps.set_build_vars.outputs.BUILD_TIME }}
          VITE_GIT_SHA=${{ steps.set_build_vars.outputs.GIT_SHA }}
    
    # Add deployment steps here - this could be SSH into your server,
    # updating a Kubernetes deployment, etc.
    # For demonstration, we'll add a placeholder
    
    - name: Deploy application (placeholder)
      if: github.ref == 'refs/heads/main'
      run: |
        echo "Deploying application to server..."
        # This would typically involve:
        # 1. SSH into your server or connecting to your orchestration platform (K8s, etc.)
        # 2. Pulling the latest images
        # 3. Restarting services or applying new deployments
        # For example:
        # ssh user@server 'cd /path/to/app && docker-compose pull && docker-compose up -d'
        echo "Deployment completed!"
