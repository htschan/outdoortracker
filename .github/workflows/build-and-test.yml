name: Build and Test

on:
  push:
    branches: [ '**' ]
  pull_request:
    branches: [ main ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: outdoortracker_test
        ports:
          - 5432:5432
        # Health check to wait for postgres to start
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install pytest pytest-cov
    
    - name: Run tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/outdoortracker_test
        SECRET_KEY: github_actions_test_key
        JWT_SECRET_KEY: github_actions_jwt_test_key
        MAIL_SERVER: localhost
        MAIL_PORT: 25
        MAIL_USE_TLS: false
        MAIL_USERNAME: test
        MAIL_PASSWORD: test
        MAIL_DEFAULT_SENDER: test@example.com
      run: |
        cd backend
        pytest --cov=app tests/
  
  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run linter
      run: |
        cd frontend
        npm run lint
    
    - name: Run tests
      run: |
        cd frontend
        npm test
    
    - name: Build
      run: |
        cd frontend
        npm run build

  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    # Only run Docker build on main branch or pull requests to main
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build and export backend image
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        load: true
        tags: outdoortracker-backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and export frontend image
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        load: true
        tags: outdoortracker-frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Debug frontend image (nginx.conf and static files)
      run: |
        docker create --name debug-frontend outdoortracker-frontend:latest
        echo '--- /etc/nginx/conf.d/ ---'
        docker cp debug-frontend:/etc/nginx/conf.d/. .
        ls -l ./default.conf || true
        echo '--- /usr/share/nginx/html/ ---'
        docker cp debug-frontend:/usr/share/nginx/html ./html || true
        ls -l ./html || true
        echo '--- nginx -t output ---'
        docker start debug-frontend
        docker exec debug-frontend nginx -t || true
        docker logs debug-frontend || true
        docker rm -f debug-frontend
